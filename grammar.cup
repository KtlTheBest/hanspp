
// CUP specification for Cflat.
// Hans de Nivelle

import java_cup.runtime.* ; 

parser code {:
   public void syntax_error( Symbol next )
   {
      System. out. println( "Syntax Error at position " +
                               ( next. left + 1 ) + "/" + next. right +
                               " for lookahead " +
                               sym. terminalNames [ next. sym ] +
                               " with attribute " + next. value );
   }

   public cflat.Program parsetree;
:}
// Terminals (tokens returned by the tokenizer): 

terminal     ast.Bool         BOOLCONST;
terminal     ast.Char         CHARCONST;
terminal     ast.Integer      INTEGERCONST;
terminal     ast.Double       DOUBLECONST;
terminal     ast.String       STRING;
terminal     ast.Pointer      POINTERCONST; 
terminal     ast.Identifier   IDENTIFIER;

terminal          VOID, BOOL, CHAR, INTEGER, DOUBLE, POINTER, ARRAY;
terminal          IF, THEN, ELSE, WHILE, DO, PRINT, RETURN;
terminal          FUNCTION, STRUCTDEF, CONSTANT;
terminal          BEGIN, END;
terminal          LPAR, RPAR, LSQPAR, RSQPAR, COMMA, DOT, ARROW;
terminal          COLON, SEMICOLON;
terminal          ASSIGN;
   // For the operators, I use python names as much as possible: 
terminal          QUESTION, OR, AND, NOT;
terminal          EQ, NE, LT, GT, LE, GE;
terminal          ADD, SUB, MUL, TRUEDIV, MODULO;
terminal          AMPERSAND, PLUSPLUS, MINUSMINUS;

non terminal cflat.Program        Prog ; 
non terminal java.util.ArrayList< type.Field > Decllist, Decllist2;
non terminal type.Field                        Decl;
non terminal type.Type                         Type;
non terminal ast.Tree                          Stat;
non terminal java.util.ArrayList <ast.Tree>    Statlist;
non terminal ast.Tree       Expr, Expr1, Expr2, Expr3, Expr4, Expr5, Expr6;
non terminal ast.Tree       Expr7, Expr8, Expr9, Expr10, Expr11, Expr12; 
non terminal java.util.ArrayList< ast.Tree >   Exprlist ;
non terminal java.util.ArrayList< ast.Tree >   Exprlist2 ;

Prog ::=   Prog CONSTANT IDENTIFIER:i ASSIGN BOOLCONST:b SEMICOLON
              {: parsetree. addconstant( i. id, b ); :}

         | Prog CONSTANT IDENTIFIER:i ASSIGN CHARCONST:c SEMICOLON
              {: parsetree. addconstant( i. id, c ); :}
         | Prog CONSTANT IDENTIFIER:i ASSIGN INTEGERCONST: j SEMICOLON
              {: parsetree. addconstant( i. id, j ); :}
         | Prog CONSTANT IDENTIFIER:i ASSIGN DOUBLECONST:d SEMICOLON
               {: parsetree. addconstant( i. id, d ); :}

         | Prog STRUCTDEF IDENTIFIER:i ASSIGN
                 LPAR Decllist : lst RPAR SEMICOLON
            {: 
              type.FieldArray.Field[] arr = lst. toArray( new type.FieldArray.Field[0] );
              type.FieldArray farr = new type.FieldArray( arr );
              parsetree. addstruct( i. id, farr ); 
              :}
         | Prog FUNCTION IDENTIFIER:i LPAR Decllist : params RPAR COLON
           Type: rettype Stat: body
           {:
              type.FieldArray.Field[] arr = params. toArray( new type.FieldArray.Field[0] );
              type.FieldArray farr = new type.FieldArray( arr );
             parsetree. addfunction( i. id, farr, rettype, body ); :}
         |
            {: parsetree = new cflat.Program( ); :}
         ;

Decllist ::=
         {: RESULT = new java.util.ArrayList< type.Field > ( ); :}
         |
         Decllist2 : lst 
         {: RESULT = lst; :}
         ;

Decllist2 ::= Decl : d 
                     {: RESULT = new java.util.ArrayList< type.Field > ( );
                        RESULT. add( d ); :} 
          |
             Decllist2 : lst COMMA Decl : d 
                {: RESULT = lst; RESULT. add( d ); :} 
          ;

Decl ::= IDENTIFIER:id COLON Type:tp 
         {:
             RESULT = new type.Field( id. id, tp );  
         :}
         ;

Type ::=   VOID    {: RESULT = new type.Void( ); :}
         | BOOL    {: RESULT = new type.Bool( ); :}
         | CHAR    {: RESULT = new type.Char( ); :}
         | INTEGER {: RESULT = new type.Integer( ); :}
         | DOUBLE  {: RESULT = new type.Double( ); :}
         | POINTER LPAR Type : t RPAR {: RESULT = new type.Pointer(t); :}
         | ARRAY LPAR INTEGERCONST : cnst COMMA Type : t RPAR 
            {: RESULT = new type.Array(cnst.i, t); :}
         | ARRAY LPAR IDENTIFIER: id COMMA Type : tp RPAR
              {: ast.Tree val = parsetree. constdefs. get( id.id );
                 if( val == null )
                    throw new SemanticError( "identifier " + id.id +
                        " used as array size but has no constant definition" );
                 if( val instanceof ast.Integer )
                 {
                    RESULT = new type.Array( ((ast.Integer) val).i, tp );
                 }
                 else
                    throw new SemanticError( "identifier " + id.id +
                       " used in array size but not defined as integer" );
              :}
         | IDENTIFIER : id {: 
              id.type = new type.Struct(id.id);
              RESULT = id.type; :}
         ;

Stat  ::=  IF Expr : cond THEN Stat : body 
              {: RESULT = new ast.Apply( "[if]", cond, body ); :}
         |
           IF Expr :cond THEN Stat:s1 ELSE Stat:s2 
              {: RESULT = new ast.Apply( "[if]", cond, s1, s2 ); :} 
         |
           WHILE Expr : e DO Stat : stat
              {: RESULT = new ast.Apply( "[while]", e, stat ); :}
         |
           BEGIN Statlist : statlist END
              {: ast.Tree[] arr = statlist.toArray(new ast.Tree[0]);
                 RESULT = new ast.Apply("[compound]", arr); :}
         |
           PRINT Expr : e
              {: RESULT = new ast.Apply("[print]", e); :}
         |
           PRINT STRING : str
              {: RESULT = new ast.Apply("[print]", str); :}
         |
           RETURN Expr : e
              {: RESULT = new ast.Apply("[return]", e); :}
         |
           Expr : e
              {: RESULT = new ast.Apply("[expr]", e); :}
         |
           Decl : d
              {: 
                ast.Identifier id = new ast.Identifier(d.f); 
                id.lr = 'L'; 
                id.type = d.tp; 
                ast.Tree res = new ast.Apply("[decl]", id); 
                res. type = d.tp;
                RESULT = res;
                :}
         |
           RETURN {: RESULT = new ast.Apply("[return]"); :}
           ;

Statlist ::= Stat : s {: java.util.ArrayList <ast.Tree> lst = 
                                new java.util.ArrayList<ast.Tree>(); 
                         lst.add(s); 
                         RESULT = lst; :}
    | Statlist : slst SEMICOLON Stat : s {: slst.add(s); RESULT = slst; :}
      ;

Expr ::= Expr2 : e1 ASSIGN Expr2: e2 {: RESULT = new ast.Apply("=", e1, e2); :}
    | Expr2 : e2 {: RESULT = e2; :}
    ;

Expr2 ::= Expr3 : Cond QUESTION Expr3 : True COLON Expr3 : False 
      {: RESULT = new ast.Apply("??", Cond, True, False); :}
      | Expr3 : e3 {: RESULT = e3; :}
      ;

Expr3 ::= Expr3 : cond1 OR Expr4 : cond2 {: RESULT = new ast.Apply("??", cond1, new ast.Bool(true), cond2); :}
    | Expr4 : e4 {: RESULT = e4; :}
    ;

Expr4 ::= Expr4 : cond1 AND Expr5 : cond2 {: RESULT = new ast.Apply("??", cond1, cond2, new ast.Bool(false)); :}
    | Expr5 : e5 {: RESULT = e5; :}
    ;

Expr5 ::= NOT Expr5 : e5 {: RESULT = new ast.Apply("??", e5, new ast.Bool(false), new ast.Bool(true)); :}
    | Expr6 : e6 {: RESULT = e6; :}
    ;

Expr6 ::= Expr7 : e1 EQ Expr7 : e2 {: RESULT = new ast.Apply("eq", e1, e2); :}
    | Expr7 : e1 NE Expr7 : e2    {: RESULT = new ast.Apply("ne", e1, e2); :}
    | Expr7 : e1 LT Expr7 : e2     {: RESULT = new ast.Apply("lt", e1, e2); :}
    | Expr7 : e1 GT Expr7 : e2     {: RESULT = new ast.Apply("gt", e1, e2); :}
    | Expr7 : e1 LE Expr7 : e2     {: RESULT = new ast.Apply("le", e1, e2); :}
    | Expr7 : e1 GE Expr7 : e2     {: RESULT = new ast.Apply("ge", e1, e2); :}
    | Expr7 : e7                   {: RESULT = e7; :}
    ;

Expr7 ::= Expr7 : e1 ADD Expr8 : e2 {: RESULT = new ast.Apply("add", e1, e2); :}
    | Expr7 : e1 SUB Expr8 : e2 {: RESULT = new ast.Apply("sub", e1, e2); :}
    | Expr8 : e8 {: RESULT = e8; :}
    ;

Expr8 ::= Expr8 : e1 MUL Expr9 : e2 {: RESULT = new ast.Apply("mul", e1, e2); :}
    | Expr8 : e1 TRUEDIV Expr9 : e2 {: RESULT = new ast.Apply("div", e1, e2); :}
    | Expr8 : e1 MODULO Expr9 : e2 {: RESULT = new ast.Apply("mod", e1, e2); :}
    | Expr9 : e9 {: RESULT = e9; :}
    ;

Expr9 ::= SUB Expr9 : e9 {: RESULT = new ast.Apply("neg", e9); :}
    | Expr10 : e10 {: RESULT = e10; :}
    ;

Expr10 ::= MUL Expr10 : e10 {: RESULT = new ast.Apply("pntr", e10); :}
    | AMPERSAND Expr10 : e10 {: RESULT = new ast.Apply("amp", e10); :}
    | Expr11 : e11 {: RESULT = e11; :}
    ;

Expr11 ::= PLUSPLUS Expr12 : e12 {: RESULT = new ast.Apply("[ppx]", e12); :}
    | MINUSMINUS Expr12 : e12 {: RESULT = new ast.Apply("[mmx]", e12); :}
    | Expr12 : e12 {: RESULT = e12; :}
    ;

Expr12 ::= Expr12 : e12 PLUSPLUS       {: RESULT = new ast.Apply("[xpp]", e12); :}
    | Expr12 : e12 MINUSMINUS          {: RESULT = new ast.Apply("[xmm]", e12); :}
    | Expr12 : e12 DOT IDENTIFIER : id {: RESULT = new ast.Select(id.id, e12); :}
    | Expr12 : e12 ARROW IDENTIFIER : id {: RESULT = new ast.Select(id.id, new ast.Apply("pntr", e12)); :}
    | Expr12 : e12 LSQPAR Expr : e RSQPAR {: RESULT = new ast.Apply("pntr", new ast.Apply("add", e12, e)); :}
    | IDENTIFIER : id {: RESULT = id; :}
    | IDENTIFIER : id LPAR Exprlist : lst RPAR {: 
                                                ast.Tree[] arr = lst.toArray(new ast.Tree[0]);
                                                RESULT = new ast.Apply(id. id, arr); :}
    | BOOLCONST : boolConst {: boolConst.type = new type.Bool(); RESULT = boolConst; :}
    | CHARCONST : charConst {: RESULT = charConst; :}
    | INTEGERCONST : intConst {: RESULT = intConst; :}
    | DOUBLECONST : doubleConst {: RESULT = doubleConst; :}
    | POINTERCONST : pntr {: RESULT = pntr; :}
    | LPAR Expr : e RPAR {: RESULT = e; :}
    ;

Exprlist ::= Exprlist2 : lst {: RESULT = lst; :}
    | {: RESULT = new java.util.ArrayList <ast.Tree> (); :}
    ;

Exprlist2 ::= Expr : e {: 
                        java.util.ArrayList <ast.Tree> lst = new java.util.ArrayList(); 
                        lst.add(e); 
                        RESULT = lst; :}
    | Exprlist2 : lst COMMA Expr : e {: lst.add(e); RESULT = lst; :}
    ;

