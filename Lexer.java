/* The following code was generated by JFlex 1.7.0 */


import java_cup.runtime.* ; 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>tokenizer.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\52\1\6"+
    "\1\60\1\55\1\0\1\51\1\0\1\34\1\35\1\5\1\54\1\40"+
    "\1\42\1\41\1\4\1\57\11\56\1\44\1\45\1\53\1\46\1\43"+
    "\1\47\1\0\32\55\1\36\1\7\1\37\1\0\1\55\1\0\1\22"+
    "\1\16\1\20\1\15\1\24\1\31\1\25\1\21\1\14\2\55\1\17"+
    "\1\55\1\10\1\13\1\27\1\55\1\23\1\32\1\11\1\26\1\12"+
    "\1\33\1\55\1\30\1\55\1\0\1\50\45\0\4\55\4\0\1\55"+
    "\12\0\1\55\4\0\1\55\5\0\27\55\1\0\37\55\1\0\u01ca\55"+
    "\4\0\14\55\16\0\5\55\7\0\1\55\1\0\1\55\201\0\5\55"+
    "\1\0\2\55\2\0\4\55\1\0\1\55\6\0\1\55\1\0\3\55"+
    "\1\0\1\55\1\0\24\55\1\0\123\55\1\0\213\55\10\0\246\55"+
    "\1\0\46\55\2\0\1\55\7\0\47\55\7\0\1\55\100\0\33\55"+
    "\5\0\3\55\30\0\1\55\24\0\53\55\43\0\2\55\1\0\143\55"+
    "\1\0\1\55\17\0\2\55\7\0\2\55\12\0\3\55\2\0\1\55"+
    "\20\0\1\55\1\0\36\55\35\0\131\55\13\0\1\55\30\0\41\55"+
    "\11\0\2\55\4\0\1\55\5\0\26\55\4\0\1\55\11\0\1\55"+
    "\3\0\1\55\27\0\31\55\7\0\13\55\65\0\25\55\1\0\10\55"+
    "\106\0\66\55\3\0\1\55\22\0\1\55\7\0\12\55\17\0\20\55"+
    "\4\0\10\55\2\0\2\55\2\0\26\55\1\0\7\55\1\0\1\55"+
    "\3\0\4\55\3\0\1\55\20\0\1\55\15\0\2\55\1\0\3\55"+
    "\16\0\4\55\7\0\2\55\10\0\6\55\4\0\2\55\2\0\26\55"+
    "\1\0\7\55\1\0\2\55\1\0\2\55\1\0\2\55\37\0\4\55"+
    "\1\0\1\55\23\0\3\55\20\0\11\55\1\0\3\55\1\0\26\55"+
    "\1\0\7\55\1\0\2\55\1\0\5\55\3\0\1\55\22\0\1\55"+
    "\17\0\2\55\17\0\1\55\7\0\1\55\13\0\10\55\2\0\2\55"+
    "\2\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55\3\0\1\55"+
    "\36\0\2\55\1\0\3\55\17\0\1\55\21\0\1\55\1\0\6\55"+
    "\3\0\3\55\1\0\4\55\3\0\2\55\1\0\1\55\1\0\2\55"+
    "\3\0\2\55\3\0\3\55\3\0\14\55\26\0\1\55\50\0\1\55"+
    "\13\0\10\55\1\0\3\55\1\0\27\55\1\0\20\55\3\0\1\55"+
    "\32\0\3\55\5\0\2\55\36\0\1\55\4\0\10\55\1\0\3\55"+
    "\1\0\27\55\1\0\12\55\1\0\5\55\3\0\1\55\40\0\1\55"+
    "\1\0\2\55\17\0\2\55\22\0\10\55\1\0\3\55\1\0\51\55"+
    "\2\0\1\55\20\0\1\55\5\0\3\55\10\0\3\55\30\0\6\55"+
    "\5\0\22\55\3\0\30\55\1\0\11\55\1\0\1\55\2\0\7\55"+
    "\72\0\60\55\1\0\2\55\13\0\10\55\72\0\2\55\1\0\1\55"+
    "\2\0\2\55\1\0\1\55\2\0\1\55\6\0\4\55\1\0\7\55"+
    "\1\0\3\55\1\0\1\55\1\0\1\55\2\0\2\55\1\0\4\55"+
    "\1\0\2\55\11\0\1\55\2\0\5\55\1\0\1\55\25\0\4\55"+
    "\40\0\1\55\77\0\10\55\1\0\44\55\33\0\5\55\163\0\53\55"+
    "\24\0\1\55\20\0\6\55\4\0\4\55\3\0\1\55\3\0\2\55"+
    "\7\0\3\55\4\0\15\55\14\0\1\55\21\0\46\55\1\0\1\55"+
    "\5\0\1\55\2\0\53\55\1\0\u014d\55\1\0\4\55\2\0\7\55"+
    "\1\0\1\55\1\0\4\55\2\0\51\55\1\0\4\55\2\0\41\55"+
    "\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55\2\0\17\55"+
    "\1\0\71\55\1\0\4\55\2\0\103\55\45\0\20\55\20\0\126\55"+
    "\2\0\6\55\3\0\u026c\55\2\0\21\55\1\0\32\55\5\0\113\55"+
    "\3\0\13\55\7\0\15\55\1\0\4\55\16\0\22\55\16\0\22\55"+
    "\16\0\15\55\1\0\3\55\17\0\64\55\43\0\1\55\3\0\2\55"+
    "\103\0\130\55\10\0\5\55\2\0\42\55\1\0\1\55\5\0\106\55"+
    "\12\0\37\55\61\0\36\55\2\0\5\55\13\0\54\55\4\0\32\55"+
    "\66\0\27\55\11\0\65\55\122\0\1\55\135\0\57\55\21\0\7\55"+
    "\67\0\36\55\15\0\2\55\12\0\54\55\32\0\44\55\51\0\3\55"+
    "\12\0\44\55\2\0\11\55\140\0\4\55\1\0\4\55\3\0\2\55"+
    "\11\0\300\55\100\0\u0116\55\2\0\6\55\2\0\46\55\2\0\6\55"+
    "\2\0\10\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0\37\55"+
    "\2\0\65\55\1\0\7\55\1\0\1\55\3\0\3\55\1\0\7\55"+
    "\3\0\4\55\2\0\6\55\4\0\15\55\5\0\3\55\1\0\7\55"+
    "\102\0\2\55\23\0\1\55\34\0\1\55\15\0\1\55\20\0\15\55"+
    "\3\0\40\55\102\0\1\55\4\0\1\55\2\0\12\55\1\0\1\55"+
    "\3\0\5\55\6\0\1\55\1\0\1\55\1\0\1\55\1\0\4\55"+
    "\1\0\13\55\2\0\4\55\5\0\5\55\4\0\1\55\21\0\51\55"+
    "\u0a77\0\57\55\1\0\57\55\1\0\205\55\6\0\4\55\3\0\2\55"+
    "\14\0\46\55\1\0\1\55\5\0\1\55\2\0\70\55\7\0\1\55"+
    "\20\0\27\55\11\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55"+
    "\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\120\0\1\55"+
    "\u01d5\0\3\55\31\0\11\55\7\0\5\55\2\0\5\55\4\0\126\55"+
    "\6\0\3\55\1\0\132\55\1\0\4\55\5\0\52\55\2\0\136\55"+
    "\21\0\33\55\65\0\20\55\u0200\0\u19b6\55\112\0\u51eb\55\25\0\u048d\55"+
    "\103\0\56\55\2\0\u010d\55\3\0\20\55\12\0\2\55\24\0\57\55"+
    "\20\0\37\55\2\0\120\55\47\0\11\55\2\0\147\55\2\0\44\55"+
    "\1\0\10\55\77\0\13\55\1\0\3\55\1\0\4\55\1\0\27\55"+
    "\25\0\1\55\7\0\64\55\16\0\62\55\76\0\6\55\3\0\1\55"+
    "\1\0\1\55\14\0\34\55\12\0\27\55\31\0\35\55\7\0\57\55"+
    "\34\0\1\55\20\0\5\55\1\0\12\55\12\0\5\55\1\0\51\55"+
    "\27\0\3\55\1\0\10\55\24\0\27\55\3\0\1\55\3\0\62\55"+
    "\1\0\1\55\3\0\2\55\2\0\5\55\2\0\1\55\1\0\1\55"+
    "\30\0\3\55\2\0\13\55\7\0\3\55\14\0\6\55\2\0\6\55"+
    "\2\0\6\55\11\0\7\55\1\0\7\55\1\0\53\55\1\0\12\55"+
    "\12\0\163\55\35\0\u2ba4\55\14\0\27\55\4\0\61\55\u2104\0\u016e\55"+
    "\2\0\152\55\46\0\7\55\14\0\5\55\5\0\1\55\1\0\12\55"+
    "\1\0\15\55\1\0\5\55\1\0\1\55\1\0\2\55\1\0\2\55"+
    "\1\0\154\55\41\0\u016b\55\22\0\100\55\2\0\66\55\50\0\15\55"+
    "\66\0\2\55\30\0\3\55\31\0\1\55\6\0\5\55\1\0\207\55"+
    "\7\0\1\55\34\0\32\55\4\0\1\55\1\0\32\55\13\0\131\55"+
    "\3\0\6\55\2\0\6\55\2\0\6\55\2\0\3\55\3\0\2\55"+
    "\3\0\2\55\31\0\14\55\1\0\32\55\1\0\23\55\1\0\2\55"+
    "\1\0\17\55\2\0\16\55\42\0\173\55\105\0\65\55\u010b\0\35\55"+
    "\3\0\61\55\57\0\40\55\15\0\36\55\5\0\46\55\12\0\36\55"+
    "\2\0\44\55\4\0\10\55\1\0\5\55\52\0\236\55\22\0\44\55"+
    "\4\0\44\55\4\0\50\55\10\0\64\55\234\0\u0137\55\11\0\26\55"+
    "\12\0\10\55\230\0\6\55\2\0\1\55\1\0\54\55\1\0\2\55"+
    "\3\0\1\55\2\0\27\55\12\0\27\55\11\0\37\55\101\0\23\55"+
    "\1\0\2\55\12\0\26\55\12\0\32\55\106\0\70\55\6\0\2\55"+
    "\100\0\1\55\17\0\4\55\1\0\3\55\1\0\33\55\54\0\35\55"+
    "\3\0\35\55\43\0\10\55\1\0\34\55\33\0\66\55\12\0\26\55"+
    "\12\0\23\55\15\0\22\55\156\0\111\55\67\0\63\55\15\0\63\55"+
    "\u0310\0\65\55\113\0\55\55\40\0\31\55\32\0\44\55\51\0\43\55"+
    "\3\0\1\55\14\0\60\55\16\0\4\55\25\0\1\55\1\0\1\55"+
    "\43\0\22\55\1\0\31\55\124\0\7\55\1\0\1\55\1\0\4\55"+
    "\1\0\17\55\1\0\12\55\7\0\57\55\46\0\10\55\2\0\2\55"+
    "\2\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55\3\0\1\55"+
    "\22\0\1\55\14\0\5\55\236\0\65\55\22\0\4\55\65\0\60\55"+
    "\24\0\2\55\1\0\1\55\270\0\57\55\51\0\4\55\44\0\60\55"+
    "\24\0\1\55\73\0\53\55\125\0\32\55\u0186\0\100\55\37\0\1\55"+
    "\u0100\0\1\55\12\0\50\55\7\0\1\55\25\0\1\55\13\0\50\55"+
    "\2\0\4\55\66\0\71\55\u0107\0\11\55\1\0\45\55\21\0\1\55"+
    "\61\0\36\55\160\0\7\55\1\0\2\55\1\0\46\55\25\0\1\55"+
    "\u02b9\0\u039a\55\146\0\157\55\21\0\304\55\u0abc\0\u042f\55\u0fd1\0\u0247\55"+
    "\u21b9\0\u0239\55\7\0\37\55\161\0\36\55\22\0\60\55\20\0\4\55"+
    "\37\0\25\55\5\0\23\55\u0370\0\105\55\13\0\1\55\102\0\15\55"+
    "\100\0\2\55\36\0\u17ed\55\23\0\u02f3\55\u250d\0\u011f\55\121\0\u018c\55"+
    "\u0904\0\153\55\5\0\15\55\3\0\11\55\7\0\12\55\u1766\0\125\55"+
    "\1\0\107\55\1\0\2\55\2\0\1\55\2\0\2\55\2\0\4\55"+
    "\1\0\14\55\1\0\1\55\1\0\7\55\1\0\101\55\1\0\4\55"+
    "\2\0\10\55\1\0\7\55\1\0\34\55\1\0\4\55\1\0\5\55"+
    "\1\0\1\55\3\0\7\55\1\0\u0154\55\2\0\31\55\1\0\31\55"+
    "\1\0\37\55\1\0\31\55\1\0\37\55\1\0\31\55\1\0\37\55"+
    "\1\0\31\55\1\0\37\55\1\0\31\55\1\0\10\55\u1034\0\305\55"+
    "\73\0\104\55\u04bc\0\4\55\1\0\33\55\1\0\2\55\1\0\1\55"+
    "\2\0\1\55\1\0\12\55\1\0\4\55\1\0\1\55\1\0\1\55"+
    "\6\0\1\55\4\0\1\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\2\55\1\0\1\55\2\0\1\55\1\0\1\55\1\0\1\55"+
    "\1\0\1\55\1\0\1\55\1\0\2\55\1\0\1\55\2\0\4\55"+
    "\1\0\7\55\1\0\4\55\1\0\4\55\1\0\1\55\1\0\12\55"+
    "\1\0\21\55\5\0\3\55\1\0\5\55\1\0\21\55\u1144\0\ua6d7\55"+
    "\51\0\u1035\55\13\0\336\55\2\0\u1682\55\16\0\u1d31\55\u0c1f\0\u021e\55"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\17\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\2\0\1\30\1\0\5\5\1\31\1\32"+
    "\16\5\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\0\14\5\1\44\7\5\1\45\1\46"+
    "\1\47\1\50\1\51\2\5\1\52\2\5\1\53\2\5"+
    "\1\54\10\5\1\55\1\5\1\56\2\5\1\57\1\60"+
    "\2\5\1\61\1\5\1\62\1\5\1\63\3\5\1\64"+
    "\1\5\1\65\2\5\1\66\1\67\1\5\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\61\0\304\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\u03d4\0\u0405\0\61\0\61"+
    "\0\u0436\0\61\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\61\0\u05be\0\304\0\61\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0188\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0188\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u09f4\0\u0188\0\u0188\0\u0188\0\u0188\0\u0df9"+
    "\0\u0e2a\0\u0188\0\u0e5b\0\u0e8c\0\u0188\0\u0ebd\0\u0eee\0\u0188"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u0188\0\u10a7\0\u0188\0\u10d8\0\u1109\0\u0188\0\u0188\0\u113a"+
    "\0\u116b\0\u0188\0\u119c\0\u0188\0\u11cd\0\u0188\0\u11fe\0\u122f"+
    "\0\u1260\0\u0188\0\u1291\0\u0188\0\u12c2\0\u12f3\0\u0188\0\u0188"+
    "\0\u1324\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\13\1\17"+
    "\1\13\1\20\1\21\1\22\2\13\1\23\1\13\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\13\1\50\1\51\1\52\63\0"+
    "\1\4\63\0\1\53\53\0\6\54\1\55\1\56\51\54"+
    "\10\0\16\13\1\57\5\13\21\0\3\13\11\0\11\13"+
    "\1\60\1\13\1\61\10\13\21\0\3\13\11\0\3\13"+
    "\1\62\20\13\21\0\3\13\11\0\24\13\21\0\3\13"+
    "\11\0\1\63\20\13\1\64\2\13\21\0\3\13\11\0"+
    "\3\13\1\65\20\13\21\0\3\13\11\0\3\13\1\66"+
    "\10\13\1\67\7\13\21\0\3\13\11\0\3\13\1\70"+
    "\5\13\1\71\12\13\21\0\3\13\11\0\13\13\1\72"+
    "\10\13\21\0\3\13\11\0\14\13\1\73\7\13\21\0"+
    "\3\13\11\0\1\74\6\13\1\75\14\13\21\0\3\13"+
    "\11\0\3\13\1\76\7\13\1\77\10\13\21\0\3\13"+
    "\11\0\12\13\1\100\3\13\1\101\5\13\21\0\3\13"+
    "\11\0\1\13\1\102\22\13\21\0\3\13\11\0\11\13"+
    "\1\103\12\13\21\0\3\13\43\0\1\104\1\105\63\0"+
    "\1\106\60\0\1\107\62\0\1\110\61\0\1\111\55\0"+
    "\1\112\60\0\1\113\66\0\1\114\45\0\1\115\14\0"+
    "\2\50\42\0\1\115\17\0\5\53\1\116\53\53\7\0"+
    "\3\54\57\0\7\13\1\117\14\13\21\0\3\13\11\0"+
    "\14\13\1\120\7\13\21\0\3\13\11\0\16\13\1\121"+
    "\5\13\21\0\3\13\11\0\4\13\1\122\17\13\21\0"+
    "\3\13\11\0\1\13\1\123\22\13\21\0\3\13\11\0"+
    "\16\13\1\124\5\13\21\0\3\13\11\0\3\13\1\125"+
    "\20\13\21\0\3\13\11\0\15\13\1\126\6\13\21\0"+
    "\3\13\11\0\1\127\23\13\21\0\3\13\11\0\12\13"+
    "\1\130\11\13\21\0\3\13\11\0\13\13\1\131\10\13"+
    "\21\0\3\13\11\0\1\13\1\132\22\13\21\0\3\13"+
    "\11\0\5\13\1\133\16\13\21\0\3\13\11\0\22\13"+
    "\1\134\1\13\21\0\3\13\11\0\4\13\1\135\17\13"+
    "\21\0\3\13\11\0\4\13\1\136\17\13\21\0\3\13"+
    "\11\0\7\13\1\137\14\13\21\0\3\13\11\0\1\140"+
    "\23\13\21\0\3\13\11\0\13\13\1\141\10\13\21\0"+
    "\3\13\11\0\4\13\1\142\17\13\21\0\3\13\57\0"+
    "\2\143\1\0\4\53\1\4\1\116\53\53\10\0\7\13"+
    "\1\144\14\13\21\0\3\13\11\0\1\145\23\13\21\0"+
    "\3\13\11\0\14\13\1\146\7\13\21\0\3\13\11\0"+
    "\5\13\1\147\16\13\21\0\3\13\11\0\14\13\1\150"+
    "\7\13\21\0\3\13\11\0\6\13\1\151\15\13\21\0"+
    "\3\13\11\0\7\13\1\152\14\13\21\0\3\13\11\0"+
    "\4\13\1\153\17\13\21\0\3\13\11\0\22\13\1\154"+
    "\1\13\21\0\3\13\11\0\13\13\1\155\10\13\21\0"+
    "\3\13\11\0\12\13\1\156\11\13\21\0\3\13\11\0"+
    "\16\13\1\157\5\13\21\0\3\13\11\0\14\13\1\160"+
    "\7\13\21\0\3\13\11\0\1\161\23\13\21\0\3\13"+
    "\11\0\1\162\23\13\21\0\3\13\11\0\22\13\1\163"+
    "\1\13\21\0\3\13\11\0\10\13\1\164\13\13\21\0"+
    "\3\13\11\0\16\13\1\165\5\13\21\0\3\13\11\0"+
    "\7\13\1\166\14\13\21\0\3\13\11\0\15\13\1\167"+
    "\6\13\21\0\3\13\11\0\7\13\1\170\14\13\21\0"+
    "\3\13\11\0\1\171\23\13\21\0\3\13\11\0\1\13"+
    "\1\172\22\13\21\0\3\13\11\0\20\13\1\173\3\13"+
    "\21\0\3\13\11\0\13\13\1\174\10\13\21\0\3\13"+
    "\11\0\1\13\1\175\22\13\21\0\3\13\11\0\1\13"+
    "\1\176\22\13\21\0\3\13\11\0\14\13\1\177\7\13"+
    "\21\0\3\13\11\0\1\13\1\200\22\13\21\0\3\13"+
    "\11\0\10\13\1\201\13\13\21\0\3\13\11\0\14\13"+
    "\1\202\7\13\21\0\3\13\11\0\14\13\1\203\7\13"+
    "\21\0\3\13\11\0\14\13\1\204\7\13\21\0\3\13"+
    "\11\0\12\13\1\205\11\13\21\0\3\13\11\0\1\206"+
    "\23\13\21\0\3\13\11\0\14\13\1\207\7\13\21\0"+
    "\3\13\11\0\4\13\1\210\17\13\21\0\3\13\11\0"+
    "\1\13\1\211\22\13\21\0\3\13\11\0\13\13\1\212"+
    "\10\13\21\0\3\13\11\0\1\213\23\13\21\0\3\13"+
    "\11\0\13\13\1\214\10\13\21\0\3\13\11\0\3\13"+
    "\1\215\20\13\21\0\3\13\11\0\5\13\1\216\16\13"+
    "\21\0\3\13\11\0\1\13\1\217\22\13\21\0\3\13"+
    "\11\0\1\220\23\13\21\0\3\13\11\0\14\13\1\221"+
    "\7\13\21\0\3\13\11\0\21\13\1\222\2\13\21\0"+
    "\3\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4949];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\20\1\6\11"+
    "\2\1\2\11\1\1\1\11\7\1\1\11\2\0\1\11"+
    "\1\0\25\1\11\11\2\0\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer readstring = new StringBuffer();

   private Symbol symbol( int type ) { 
      return new Symbol( type, yyline, yycolumn ); 
   }

   private Symbol symbol( int type, Object value ) 
   {
      return new Symbol( type, yyline, yycolumn, value ); 
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2570) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ScanError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new ScanError( "Unrecognized character <" + yytext( ) + ">",
                              yyline, yycolumn );
            } 
            // fall through
          case 57: break;
          case 2: 
            { 
            } 
            // fall through
          case 58: break;
          case 3: 
            { return symbol( sym. TRUEDIV );
            } 
            // fall through
          case 59: break;
          case 4: 
            { return symbol( sym. MUL );
            } 
            // fall through
          case 60: break;
          case 5: 
            { return symbol( sym.IDENTIFIER, new ast.Identifier( yytext( ) ));
            } 
            // fall through
          case 61: break;
          case 6: 
            { return symbol( sym. LPAR );
            } 
            // fall through
          case 62: break;
          case 7: 
            { return symbol( sym. RPAR );
            } 
            // fall through
          case 63: break;
          case 8: 
            { return symbol( sym. LSQPAR );
            } 
            // fall through
          case 64: break;
          case 9: 
            { return symbol( sym. RSQPAR );
            } 
            // fall through
          case 65: break;
          case 10: 
            { return symbol( sym. COMMA );
            } 
            // fall through
          case 66: break;
          case 11: 
            { return symbol( sym. DOT );
            } 
            // fall through
          case 67: break;
          case 12: 
            { return symbol( sym. SUB );
            } 
            // fall through
          case 68: break;
          case 13: 
            { return symbol( sym. GT );
            } 
            // fall through
          case 69: break;
          case 14: 
            { return symbol( sym. COLON );
            } 
            // fall through
          case 70: break;
          case 15: 
            { return symbol( sym. SEMICOLON );
            } 
            // fall through
          case 71: break;
          case 16: 
            { return symbol( sym. ASSIGN );
            } 
            // fall through
          case 72: break;
          case 17: 
            { return symbol( sym. QUESTION );
            } 
            // fall through
          case 73: break;
          case 18: 
            { return symbol( sym. AMPERSAND );
            } 
            // fall through
          case 74: break;
          case 19: 
            { return symbol( sym. NOT );
            } 
            // fall through
          case 75: break;
          case 20: 
            { return symbol( sym. LT );
            } 
            // fall through
          case 76: break;
          case 21: 
            { return symbol( sym. ADD );
            } 
            // fall through
          case 77: break;
          case 22: 
            { return symbol( sym.INTEGERCONST, 
                     new ast.Integer( new java.lang.Integer( yytext( ) )));
            } 
            // fall through
          case 78: break;
          case 23: 
            { return symbol( sym. EOF );
            } 
            // fall through
          case 79: break;
          case 24: 
            { return symbol( sym.STRINGCONST, 
                                new ast.String( yytext( ). 
                                   substring( 1, 
                                             yytext( ).length() - 1 ) ));
            } 
            // fall through
          case 80: break;
          case 25: 
            { return symbol( sym. IF );
            } 
            // fall through
          case 81: break;
          case 26: 
            { return symbol( sym. DO );
            } 
            // fall through
          case 82: break;
          case 27: 
            { return symbol( sym. MINUSMINUS );
            } 
            // fall through
          case 83: break;
          case 28: 
            { return symbol( sym. ARROW );
            } 
            // fall through
          case 84: break;
          case 29: 
            { return symbol( sym. GE );
            } 
            // fall through
          case 85: break;
          case 30: 
            { return symbol( sym. EQ );
            } 
            // fall through
          case 86: break;
          case 31: 
            { return symbol( sym. OR );
            } 
            // fall through
          case 87: break;
          case 32: 
            { return symbol( sym. AND );
            } 
            // fall through
          case 88: break;
          case 33: 
            { return symbol( sym. NE );
            } 
            // fall through
          case 89: break;
          case 34: 
            { return symbol( sym. LE );
            } 
            // fall through
          case 90: break;
          case 35: 
            { return symbol( sym. PLUSPLUS );
            } 
            // fall through
          case 91: break;
          case 36: 
            { return symbol( sym. END );
            } 
            // fall through
          case 92: break;
          case 37: 
            { return symbol( sym.DOUBLECONST, 
                       new ast.Double( new java.lang.Double( yytext( ) )));
            } 
            // fall through
          case 93: break;
          case 38: 
            { return symbol( sym.POINTERCONST, new ast.Pointer(0) );
            } 
            // fall through
          case 94: break;
          case 39: 
            { return symbol( sym. THEN );
            } 
            // fall through
          case 95: break;
          case 40: 
            { return symbol( sym.BOOLCONST, new ast.Bool( true ));
            } 
            // fall through
          case 96: break;
          case 41: 
            { return symbol( sym. VOID );
            } 
            // fall through
          case 97: break;
          case 42: 
            { return symbol( sym. BOOL );
            } 
            // fall through
          case 98: break;
          case 43: 
            { return symbol( sym. CHAR );
            } 
            // fall through
          case 99: break;
          case 44: 
            { return symbol( sym. ELSE );
            } 
            // fall through
          case 100: break;
          case 45: 
            { return symbol( sym. BEGIN );
            } 
            // fall through
          case 101: break;
          case 46: 
            { return symbol( sym. ARRAY );
            } 
            // fall through
          case 102: break;
          case 47: 
            { return symbol( sym. PRINT );
            } 
            // fall through
          case 103: break;
          case 48: 
            { return symbol( sym.BOOLCONST, new ast.Bool( false ));
            } 
            // fall through
          case 104: break;
          case 49: 
            { return symbol( sym. WHILE );
            } 
            // fall through
          case 105: break;
          case 50: 
            { return symbol( sym. DOUBLE );
            } 
            // fall through
          case 106: break;
          case 51: 
            { return symbol( sym. RETURN );
            } 
            // fall through
          case 107: break;
          case 52: 
            { return symbol( sym. INTEGER );
            } 
            // fall through
          case 108: break;
          case 53: 
            { return symbol( sym. POINTER );
            } 
            // fall through
          case 109: break;
          case 54: 
            { return symbol( sym. CONSTANT );
            } 
            // fall through
          case 110: break;
          case 55: 
            { return symbol( sym. FUNCTION );
            } 
            // fall through
          case 111: break;
          case 56: 
            { return symbol( sym. STRUCTDEF );
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
