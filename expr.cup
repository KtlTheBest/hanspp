
// CUP specification for expressions, part of CSCI 355. 

import java_cup.runtime.* ; 

// Terminals (tokens returned by the scanner). 

terminal LPAR, RPAR, DOT, COMMA, PLUS, MINUS, TIMES, DIVIDES;
terminal tree.Tree INTEGER, DOUBLE, STRING;

non terminal mainloop;
non terminal tree.Tree expr, expr1, expr2, expr3;
non terminal java.util.ArrayList<tree.Tree> args;

start with mainloop ;

mainloop ::=  
         | mainloop expr:e 
              {: System.out.println( "You typed expression: " + e ); 
                 System.out.println( "AST as tree: " );
                 System.out.println( e. showTree(1) ); 

                 if( e. hasString( ) &&
                     e. getString( ). equals( "quit" ) &&
                     e. nrSubTrees( ) == 0 )
                 {
                    throw new Quit( eleft, eright ); 
                 }
              :} 

              DOT
              ;


expr ::= expr:e PLUS expr1:e1 {: RESULT = new tree.String("+", e, e1); :}
  | expr:e MINUS expr1:e1 {: RESULT = new tree.String("-", e, e1); :}
  | expr1:e1 {: RESULT = e1; :}
  ;

expr1 ::= expr1:e1 TIMES expr2:e2 {: RESULT = new tree.String("*", e1, e2); :}
  | expr1:e1 DIVIDES expr2:e2 {: RESULT = new tree.String("/", e1, e2); :}
  | expr2:e2 {: RESULT = e2; :}
  ;

expr2 ::= MINUS expr2:e2 {: RESULT = new tree.String("-", e2); :}
  | expr3:e3 {: RESULT = e3; :}
  ;

expr3 ::= INTEGER:i {: RESULT = i; :}
  | DOUBLE:d {: RESULT = d; :}
  | STRING:s {: 
      RESULT = s; 
    :}
  | STRING:s LPAR args:a RPAR {: 
      tree.Tree[] lst = a.toArray(new tree.Tree[0]);
      RESULT = new tree.String(s.getString(), lst);
    :}
  | LPAR expr:e RPAR {: RESULT = e; :}
  ;

args ::= expr:e {: 
      java.util.ArrayList <tree.Tree> x = new java.util.ArrayList <tree.Tree>();
      x.add(e);
      RESULT = x; 
    :}
  | args:a COMMA expr:e {: 
      if(a == null) System.out.println("KEK");
      a.add(e); 
      RESULT = a;
    :}
  ;
