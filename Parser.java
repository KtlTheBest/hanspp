
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\010\000\002\002\004\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\012" +
    "\000\002\002\013\000\002\002\002\000\002\003\002\000" +
    "\002\003\003\000\002\004\003\000\002\004\005\000\002" +
    "\005\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\006" +
    "\000\002\006\010\000\002\006\003\000\002\007\006\000" +
    "\002\007\010\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\012\003\000\002\012\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\006\000\002" +
    "\013\005\000\002\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\012\002\ufffa\031\ufffa\032\ufffa\033\ufffa\001" +
    "\002\000\012\002\010\031\007\032\006\033\005\001\002" +
    "\000\004\012\122\001\002\000\004\012\114\001\002\000" +
    "\004\012\011\001\002\000\004\002\000\001\002\000\004" +
    "\036\012\001\002\000\006\012\015\037\ufff9\001\002\000" +
    "\006\037\ufff8\042\112\001\002\000\004\037\041\001\002" +
    "\000\004\045\017\001\002\000\006\037\ufff7\042\ufff7\001" +
    "\002\000\022\012\027\013\024\014\022\015\030\016\021" +
    "\017\025\020\026\021\023\001\002\000\020\002\ufff5\024" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\037\ufff5\042\ufff5\001\002" +
    "\000\040\002\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\022" +
    "\ufff1\024\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\036\ufff1" +
    "\037\ufff1\042\ufff1\063\ufff1\001\002\000\040\002\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\022\ufff3\024\ufff3\027\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\036\ufff3\037\ufff3\042\ufff3\063" +
    "\ufff3\001\002\000\004\036\034\001\002\000\040\002\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\012\ufff4\022\ufff4\024\ufff4\027" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\036\ufff4\037\ufff4\042\ufff4" +
    "\063\ufff4\001\002\000\040\002\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\012\ufff0\022\ufff0\024\ufff0\027\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\036\ufff0\037\ufff0\042\ufff0\063\ufff0\001\002\000" +
    "\004\036\031\001\002\000\040\002\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\022\uffed\024\uffed\027\uffed\031\uffed\032" +
    "\uffed\033\uffed\036\uffed\037\uffed\042\uffed\063\uffed\001\002" +
    "\000\040\002\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\022" +
    "\ufff2\024\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\036\ufff2" +
    "\037\ufff2\042\ufff2\063\ufff2\001\002\000\022\012\027\013" +
    "\024\014\022\015\030\016\021\017\025\020\026\021\023" +
    "\001\002\000\004\037\033\001\002\000\040\002\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\022\uffef\024\uffef\027\uffef" +
    "\031\uffef\032\uffef\033\uffef\036\uffef\037\uffef\042\uffef\063" +
    "\uffef\001\002\000\004\006\035\001\002\000\004\042\036" +
    "\001\002\000\022\012\027\013\024\014\022\015\030\016" +
    "\021\017\025\020\026\021\023\001\002\000\004\037\040" +
    "\001\002\000\040\002\uffee\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\022\uffee\024\uffee\027\uffee\031\uffee\032\uffee\033\uffee" +
    "\036\uffee\037\uffee\042\uffee\063\uffee\001\002\000\004\045" +
    "\042\001\002\000\022\012\027\013\024\014\022\015\030" +
    "\016\021\017\025\020\026\021\023\001\002\000\022\006" +
    "\052\007\061\010\050\012\057\022\054\027\056\036\053" +
    "\063\055\001\002\000\014\002\uffe9\024\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\001\002\000\032\002\uffe1\023\uffe1\024\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\037\uffe1\042\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\001\002\000\020\002\uffe8\024\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\062\072\063\071\001\002\000" +
    "\032\002\uffe4\023\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\037\uffe4\042\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\001" +
    "\002\000\032\002\uffdd\023\uffdd\024\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\037\uffdd\042\uffdd\062\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\001\002\000\032\002\uffe7\023\uffe7\024\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\037\uffe7\042\uffe7\062\uffe7\063\uffe7\064" +
    "\075\065\074\001\002\000\032\002\uffdf\023\uffdf\024\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\037\uffdf\042\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\001\002\000\016\006\052\007\061" +
    "\010\050\012\064\036\053\063\055\001\002\000\016\006" +
    "\052\007\061\010\050\012\064\036\053\063\055\001\002" +
    "\000\016\006\052\007\061\010\050\012\064\036\053\063" +
    "\055\001\002\000\004\010\101\001\002\000\006\036\062" +
    "\045\017\001\002\000\012\002\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\001\002\000\032\002\uffde\023\uffde\024\uffde\031\uffde" +
    "\032\uffde\033\uffde\037\uffde\042\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\001\002\000\016\006\052\007\061\010\050" +
    "\012\064\036\053\063\055\001\002\000\012\037\uffda\042" +
    "\uffda\062\072\063\071\001\002\000\004\036\062\001\002" +
    "\000\006\037\067\042\066\001\002\000\016\006\052\007" +
    "\061\010\050\012\064\036\053\063\055\001\002\000\032" +
    "\002\uffdc\023\uffdc\024\uffdc\031\uffdc\032\uffdc\033\uffdc\037" +
    "\uffdc\042\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\001\002" +
    "\000\012\037\uffd9\042\uffd9\062\072\063\071\001\002\000" +
    "\016\006\052\007\061\010\050\012\064\036\053\063\055" +
    "\001\002\000\016\006\052\007\061\010\050\012\064\036" +
    "\053\063\055\001\002\000\032\002\uffe6\023\uffe6\024\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\037\uffe6\042\uffe6\062\uffe6\063" +
    "\uffe6\064\075\065\074\001\002\000\016\006\052\007\061" +
    "\010\050\012\064\036\053\063\055\001\002\000\016\006" +
    "\052\007\061\010\050\012\064\036\053\063\055\001\002" +
    "\000\032\002\uffe3\023\uffe3\024\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\037\uffe3\042\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\001\002\000\032\002\uffe2\023\uffe2\024\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\037\uffe2\042\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\001\002\000\032\002\uffe5\023\uffe5\024\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\037\uffe5\042\uffe5\062\uffe5\063\uffe5" +
    "\064\075\065\074\001\002\000\014\002\uffea\024\uffea\031" +
    "\uffea\032\uffea\033\uffea\001\002\000\032\002\uffe0\023\uffe0" +
    "\024\uffe0\031\uffe0\032\uffe0\033\uffe0\037\uffe0\042\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\001\002\000\010\023\104" +
    "\062\072\063\071\001\002\000\022\006\052\007\061\010" +
    "\050\012\057\022\054\027\056\036\053\063\055\001\002" +
    "\000\014\002\uffec\024\106\031\uffec\032\uffec\033\uffec\001" +
    "\002\000\022\006\052\007\061\010\050\012\057\022\054" +
    "\027\056\036\053\063\055\001\002\000\014\002\uffeb\024" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\001\002\000\010\037\111" +
    "\062\072\063\071\001\002\000\032\002\uffdb\023\uffdb\024" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\037\uffdb\042\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\001\002\000\004\012\015\001" +
    "\002\000\006\037\ufff6\042\ufff6\001\002\000\004\047\115" +
    "\001\002\000\004\036\116\001\002\000\006\012\015\037" +
    "\ufff9\001\002\000\004\037\120\001\002\000\004\046\121" +
    "\001\002\000\012\002\ufffc\031\ufffc\032\ufffc\033\ufffc\001" +
    "\002\000\004\047\123\001\002\000\012\004\125\005\126" +
    "\006\127\007\124\001\002\000\004\046\133\001\002\000" +
    "\004\046\132\001\002\000\004\046\131\001\002\000\004" +
    "\046\130\001\002\000\012\002\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\001\002\000\012\002\uffff\031\uffff\032\uffff\033\uffff" +
    "\001\002\000\012\002\001\031\001\032\001\033\001\001" +
    "\002\000\012\002\ufffd\031\ufffd\032\ufffd\033\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\013\004\012\005" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\042\001\001\000\016\005\043\007\057\010\045\011\050" +
    "\012\046\013\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\107\011" +
    "\050\012\046\013\044\001\001\000\012\010\102\011\050" +
    "\012\046\013\044\001\001\000\006\012\101\013\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\062\011\050\012\046\013" +
    "\044\025\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\067\011\050\012\046\013" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\077\012\046\013\044\001\001\000\010\011\072\012" +
    "\046\013\044\001\001\000\002\001\001\000\006\012\076" +
    "\013\044\001\001\000\006\012\075\013\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\043\007\104\010\045\011\050\012\046\013\044\001\001" +
    "\000\002\001\001\000\016\005\043\007\106\010\045\011" +
    "\050\012\046\013\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\116\004\012\005\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
   public void syntax_error( Symbol next )
   {
      System. out. println( "Syntax Error at position " + 
                               ( next. left + 1 ) + "/" + next. right +
                               " for lookahead " + 
                               sym. terminalNames [ next. sym ] +
                               " with attribute " + next. value );
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN BOOLCONST SEMICOLON 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Bool b = (ast.Bool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 p. addconstant( i. id, b ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN CHARCONST SEMICOLON 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Char c = (ast.Char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 p. addconstant( i. id, c ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN INTEGERCONST SEMICOLON 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Integer j = (ast.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 p. addconstant( i. id, j ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN DOUBLECONST SEMICOLON 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Double d = (ast.Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 p. addconstant( i. id, d ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Prog ::= Prog STRUCTDEF IDENTIFIER ASSIGN LPAR Decllist RPAR SEMICOLON 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<type.Field> lst = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 p. addstruct( i. id, lst ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Prog ::= Prog FUNCTION IDENTIFIER LPAR Decllist RPAR COLON Type Stat 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.util.ArrayList<type.Field> params = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rettypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rettyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type rettype = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree body = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p. addfunction( i. id, params, rettype, body ); 
              RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Prog ::= 
            {
              Program RESULT =null;
		 RESULT = new Program( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decllist ::= 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		 RESULT = new java.util.ArrayList< type.Field > ( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decllist ::= Decllist2 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.util.ArrayList<type.Field> lst = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decllist2 ::= Decl 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Field d = (type.Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new java.util.ArrayList< type.Field > ( );
                        RESULT. add( d ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decllist2 ::= Decllist2 COMMA Decl 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<type.Field> lst = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Field d = (type.Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; RESULT. add( d ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= IDENTIFIER COLON Type 
            {
              type.Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Type tp = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             RESULT = new type.Field( id. id, tp );  
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= VOID 
            {
              type.Type RESULT =null;
		 RESULT = new type.Void( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              type.Type RESULT =null;
		 RESULT = new type.Bool( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= CHAR 
            {
              type.Type RESULT =null;
		 RESULT = new type.Char( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= INTEGER 
            {
              type.Type RESULT =null;
		 RESULT = new type.Integer( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= DOUBLE 
            {
              type.Type RESULT =null;
		 RESULT = new type.Double( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= POINTER LPAR Type RPAR 
            {
              type.Type RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type tp = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new type.Pointer( tp ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= ARRAY LPAR INTEGERCONST COMMA Type RPAR 
            {
              type.Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Integer s = (ast.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type tp = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new type.Array( s. i, tp ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= IDENTIFIER 
            {
              type.Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new type.Struct( i. id ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stat ::= IF Expr THEN Stat 
            {
              ast.Tree RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree cond = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree body = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[if]", cond, body ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat ::= IF Expr THEN Stat ELSE Stat 
            {
              ast.Tree RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Tree cond = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree s1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree s2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[if]", cond, s1, s2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat ::= PRINT STRINGCONST 
            {
              ast.Tree RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.String string = (ast.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[print]", string ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stat ::= Decl 
            {
              ast.Tree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Field d = (type.Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ast.Identifier id = new ast.Identifier( d.f );
                 RESULT = new ast.Apply( "[decl]", id );
                 RESULT. type = d. tp; RESULT. lr = 'L'; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stat ::= Expr 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[expr]", e ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= Expr1 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= Expr ADD Expr1 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "+", e1, e2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= Expr SUB Expr1 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "-", e1, e2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr1 ::= Expr2 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr1 ::= Expr1 MUL Expr2 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "*", e1, e2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr1 ::= Expr1 TRUEDIV Expr2 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "/", e1, e2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr2 ::= Expr3 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr2 ::= SUB Expr2 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "-", e ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr3 ::= INTEGERCONST 
            {
              ast.Tree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Integer i = (ast.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr3 ::= DOUBLECONST 
            {
              ast.Tree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Double d = (ast.Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr3 ::= STRINGCONST 
            {
              ast.Tree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.String s = (ast.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr3 ::= IDENTIFIER LPAR Exprlist RPAR 
            {
              ast.Tree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier s = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.util.ArrayList<ast.Tree> a = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 java.lang.String op = ((ast.Identifier) s ).id;
                RESULT = new ast.Apply( op, a.toArray( new ast.Tree[0] )); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= LPAR Expr RPAR 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exprlist ::= Expr 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 java.util.ArrayList<ast.Tree> args = 
                           new java.util.ArrayList<> ( ); 
              args. add( e );
              RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exprlist ::= Exprlist COMMA Expr 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<ast.Tree> a = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a. add(e); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
