
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\010\000\002\002\004\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\012" +
    "\000\002\002\013\000\002\002\002\000\002\003\002\000" +
    "\002\003\003\000\002\004\003\000\002\004\005\000\002" +
    "\005\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\006" +
    "\000\002\006\010\000\002\006\010\000\002\006\003\000" +
    "\002\007\006\000\002\007\010\000\002\007\006\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\003\000\002\010\005\000\002\011\005\000" +
    "\002\011\003\000\002\013\007\000\002\013\003\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\004\000\002\016\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\003" +
    "\000\002\022\004\000\002\022\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\025\004\000\002\025" +
    "\004\000\002\025\005\000\002\025\005\000\002\025\006" +
    "\000\002\025\003\000\002\025\006\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\005\000\002\026\003\000\002\026" +
    "\002\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\012\002\ufffa\031\ufffa\032\ufffa\033\ufffa\001" +
    "\002\000\012\002\010\031\007\032\006\033\005\001\002" +
    "\000\004\012\231\001\002\000\004\012\223\001\002\000" +
    "\004\012\011\001\002\000\004\002\000\001\002\000\004" +
    "\036\012\001\002\000\006\012\015\037\ufff9\001\002\000" +
    "\006\037\ufff8\042\221\001\002\000\004\037\045\001\002" +
    "\000\004\045\017\001\002\000\006\037\ufff7\042\ufff7\001" +
    "\002\000\022\012\027\013\024\014\022\015\030\016\021" +
    "\017\025\020\026\021\023\001\002\000\024\002\ufff5\024" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\037\ufff5\042\ufff5" +
    "\046\ufff5\001\002\000\070\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\022\ufff1\024\ufff1\025\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\042\ufff1\046\ufff1\053\ufff1\063\ufff1" +
    "\064\ufff1\067\ufff1\070\ufff1\071\ufff1\001\002\000\070\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\022\ufff3\024\ufff3\025\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3" +
    "\046\ufff3\053\ufff3\063\ufff3\064\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\001\002\000\004\036\034\001\002\000\070\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\022" +
    "\ufff4\024\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\042\ufff4\046" +
    "\ufff4\053\ufff4\063\ufff4\064\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\001\002\000\070\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\011\ufff0\012\ufff0\022\ufff0\024\ufff0\025\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\042\ufff0\046\ufff0\053\ufff0\063\ufff0\064\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\001\002\000\004\036\031\001" +
    "\002\000\070\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\012\uffec\022\uffec\024\uffec\025\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\042\uffec\046\uffec\053\uffec\063\uffec\064\uffec\067" +
    "\uffec\070\uffec\071\uffec\001\002\000\070\002\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\022\ufff2\024" +
    "\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2\046\ufff2\053" +
    "\ufff2\063\ufff2\064\ufff2\067\ufff2\070\ufff2\071\ufff2\001\002" +
    "\000\022\012\027\013\024\014\022\015\030\016\021\017" +
    "\025\020\026\021\023\001\002\000\004\037\033\001\002" +
    "\000\070\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\011" +
    "\uffef\012\uffef\022\uffef\024\uffef\025\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\042\uffef\046\uffef\053\uffef\063\uffef\064\uffef\067\uffef" +
    "\070\uffef\071\uffef\001\002\000\006\006\036\012\035\001" +
    "\002\000\004\042\042\001\002\000\004\042\037\001\002" +
    "\000\022\012\027\013\024\014\022\015\030\016\021\017" +
    "\025\020\026\021\023\001\002\000\004\037\041\001\002" +
    "\000\070\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\012\uffee\022\uffee\024\uffee\025\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\042\uffee\046\uffee\053\uffee\063\uffee\064\uffee\067\uffee" +
    "\070\uffee\071\uffee\001\002\000\022\012\027\013\024\014" +
    "\022\015\030\016\021\017\025\020\026\021\023\001\002" +
    "\000\004\037\044\001\002\000\070\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\012\uffed\022\uffed\024\uffed" +
    "\025\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\042\uffed\046\uffed\053\uffed" +
    "\063\uffed\064\uffed\067\uffed\070\uffed\071\uffed\001\002\000" +
    "\004\045\046\001\002\000\022\012\027\013\024\014\022" +
    "\015\030\016\021\017\025\020\026\021\023\001\002\000" +
    "\046\004\106\005\077\006\060\007\100\011\071\012\066" +
    "\022\073\025\061\027\102\030\067\034\076\036\105\053" +
    "\065\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\072\002\uffcc\023\uffcc\024\uffcc\026\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\035\uffcc\037\uffcc\041\uffcc\042\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\210\065\206\066\207\001\002\000\064\002\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\037\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\054\174\055\202\056\173\057\176" +
    "\060\177\061\201\062\200\063\175\001\002\000\044\002" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\035\uffd6\037\uffd6\041\uffd6\042\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000\012\002\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\001\002\000\044\002\uffd8\023" +
    "\uffd8\024\uffd8\026\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\037\uffd8\041\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\001\002\000\044\002\uffda\023\uffda" +
    "\024\uffda\026\uffda\031\uffda\032\uffda\033\uffda\035\uffda\037" +
    "\uffda\041\uffda\042\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\166\001\002\000\040\002\uffdc\023\uffdc\024" +
    "\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\037\uffdc" +
    "\041\uffdc\042\uffdc\046\uffdc\047\uffdc\050\163\051\164\001" +
    "\002\000\034\002\uffde\023\uffde\024\uffde\026\uffde\031\uffde" +
    "\032\uffde\033\uffde\035\uffde\037\uffde\041\uffde\042\uffde\046" +
    "\uffde\047\161\001\002\000\104\002\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\070\uffb6\071\uffb6\001\002\000\034\004" +
    "\106\005\077\006\060\007\100\011\071\012\110\036\105" +
    "\053\065\063\075\064\104\067\103\070\101\071\070\001" +
    "\002\000\104\002\uffc0\023\uffc0\024\uffc0\026\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\037\uffc0\040\131\041\uffc0\042" +
    "\uffc0\043\133\044\130\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\070\132\071\127\001\002\000\072\002\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3\037\uffc3" +
    "\041\uffc3\042\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001" +
    "\002\000\072\002\uffc6\023\uffc6\024\uffc6\026\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\035\uffc6\037\uffc6\041\uffc6\042\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000\034\004\106" +
    "\005\077\006\060\007\100\011\071\012\110\036\105\053" +
    "\065\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\074\002\uffba\024\uffba\031\uffba\032\uffba\033\uffba\035" +
    "\uffba\036\113\040\uffba\043\uffba\044\uffba\045\017\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\070\uffba\071\uffba\001\002\000\052\002" +
    "\uffe2\004\106\005\077\006\060\007\100\011\071\012\110" +
    "\024\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036\105\046" +
    "\uffe2\053\065\063\075\064\104\067\103\070\101\071\070" +
    "\001\002\000\020\004\106\005\077\006\060\007\100\011" +
    "\071\012\110\036\105\001\002\000\104\002\uffb4\023\uffb4" +
    "\024\uffb4\026\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\070\uffb4\071\uffb4\001\002\000" +
    "\020\002\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4" +
    "\046\uffe4\001\002\000\034\004\106\005\077\006\060\007" +
    "\100\011\071\012\110\036\105\053\065\063\075\064\104" +
    "\067\103\070\101\071\070\001\002\000\020\002\uffe3\024" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\046\uffe3\001\002" +
    "\000\032\004\106\005\077\006\060\007\100\011\071\012" +
    "\110\036\105\063\075\064\104\067\103\070\101\071\070" +
    "\001\002\000\046\004\106\005\077\006\060\007\100\011" +
    "\071\012\066\022\073\025\061\027\102\030\067\034\076" +
    "\036\105\053\065\063\075\064\104\067\103\070\101\071" +
    "\070\001\002\000\104\002\uffb7\023\uffb7\024\uffb7\026\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\035\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\070\uffb7\071\uffb7\001\002\000\104\002\uffb5\023" +
    "\uffb5\024\uffb5\026\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\070\uffb5\071\uffb5\001\002" +
    "\000\020\004\106\005\077\006\060\007\100\011\071\012" +
    "\110\036\105\001\002\000\036\004\106\005\077\006\060" +
    "\007\100\010\125\011\071\012\110\036\105\053\065\063" +
    "\075\064\104\067\103\070\101\071\070\001\002\000\030" +
    "\004\106\005\077\006\060\007\100\011\071\012\110\036" +
    "\105\064\104\067\103\070\101\071\070\001\002\000\030" +
    "\004\106\005\077\006\060\007\100\011\071\012\110\036" +
    "\105\064\104\067\103\070\101\071\070\001\002\000\034" +
    "\004\106\005\077\006\060\007\100\011\071\012\110\036" +
    "\105\053\065\063\075\064\104\067\103\070\101\071\070" +
    "\001\002\000\104\002\uffb8\023\uffb8\024\uffb8\026\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066" +
    "\uffb8\070\uffb8\071\uffb8\001\002\000\072\002\uffc8\023\uffc8" +
    "\024\uffc8\026\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8\037" +
    "\uffc8\041\uffc8\042\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\001\002\000\106\002\uffba\023\uffba\024\uffba\026\uffba\031" +
    "\uffba\032\uffba\033\uffba\035\uffba\036\113\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\070\uffba\071\uffba\001\002\000\004\037\112" +
    "\001\002\000\104\002\uffb3\023\uffb3\024\uffb3\026\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\070\uffb3\071\uffb3\001\002\000\036\004\106\005\077" +
    "\006\060\007\100\011\071\012\110\036\105\037\uffb1\053" +
    "\065\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\004\037\121\001\002\000\006\037\uffb0\042\uffb0\001" +
    "\002\000\006\037\uffb2\042\117\001\002\000\034\004\106" +
    "\005\077\006\060\007\100\011\071\012\110\036\105\053" +
    "\065\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\006\037\uffaf\042\uffaf\001\002\000\104\002\uffb9\023" +
    "\uffb9\024\uffb9\026\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\001\002" +
    "\000\072\002\uffc5\023\uffc5\024\uffc5\026\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\035\uffc5\037\uffc5\041\uffc5\042\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\001\002\000\072\002\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4" +
    "\037\uffc4\041\uffc4\042\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\001\002\000\020\002\uffe7\024\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\035\uffe7\046\uffe7\001\002\000\020\002\uffe6\024" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6\046\uffe6\001\002" +
    "\000\104\002\uffc2\023\uffc2\024\uffc2\026\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\035\uffc2\037\uffc2\040\131\041\uffc2\042\uffc2" +
    "\043\133\044\130\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\070" +
    "\132\071\127\001\002\000\104\002\uffbe\023\uffbe\024\uffbe" +
    "\026\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\070\uffbe\071\uffbe\001\002\000\004\012" +
    "\137\001\002\000\034\004\106\005\077\006\060\007\100" +
    "\011\071\012\110\036\105\053\065\063\075\064\104\067" +
    "\103\070\101\071\070\001\002\000\104\002\uffbf\023\uffbf" +
    "\024\uffbf\026\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\070\uffbf\071\uffbf\001\002\000" +
    "\004\012\134\001\002\000\104\002\uffbd\023\uffbd\024\uffbd" +
    "\026\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\070\uffbd\071\uffbd\001\002\000\004\041" +
    "\136\001\002\000\104\002\uffbb\023\uffbb\024\uffbb\026\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\035\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\070\uffbb\071\uffbb\001\002\000\104\002\uffbc\023" +
    "\uffbc\024\uffbc\026\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\001\002" +
    "\000\006\035\uffe1\046\uffe1\001\002\000\006\035\143\046" +
    "\142\001\002\000\046\004\106\005\077\006\060\007\100" +
    "\011\071\012\066\022\073\025\061\027\102\030\067\034" +
    "\076\036\105\053\065\063\075\064\104\067\103\070\101" +
    "\071\070\001\002\000\020\002\uffe8\024\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\035\uffe8\046\uffe8\001\002\000\006\035\uffe0" +
    "\046\uffe0\001\002\000\072\002\uffc7\023\uffc7\024\uffc7\026" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7\037\uffc7\041\uffc7" +
    "\042\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\001\002\000" +
    "\004\023\147\001\002\000\046\004\106\005\077\006\060" +
    "\007\100\011\071\012\066\022\073\025\061\027\102\030" +
    "\067\034\076\036\105\053\065\063\075\064\104\067\103" +
    "\070\101\071\070\001\002\000\020\002\uffeb\024\151\031" +
    "\uffeb\032\uffeb\033\uffeb\035\uffeb\046\uffeb\001\002\000\046" +
    "\004\106\005\077\006\060\007\100\011\071\012\066\022" +
    "\073\025\061\027\102\030\067\034\076\036\105\053\065" +
    "\063\075\064\104\067\103\070\101\071\070\001\002\000" +
    "\020\002\uffea\024\uffea\031\uffea\032\uffea\033\uffea\035\uffea" +
    "\046\uffea\001\002\000\104\002\uffc1\023\uffc1\024\uffc1\026" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\037\uffc1\040\131" +
    "\041\uffc1\042\uffc1\043\133\044\130\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\066\uffc1\070\132\071\127\001\002\000\020\002\uffe5" +
    "\024\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\046\uffe5\001" +
    "\002\000\044\002\uffd7\023\uffd7\024\uffd7\026\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\037\uffd7\041\uffd7\042\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002" +
    "\000\004\026\157\001\002\000\046\004\106\005\077\006" +
    "\060\007\100\011\071\012\066\022\073\025\061\027\102" +
    "\030\067\034\076\036\105\053\065\063\075\064\104\067" +
    "\103\070\101\071\070\001\002\000\020\002\uffe9\024\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\035\uffe9\046\uffe9\001\002\000" +
    "\034\004\106\005\077\006\060\007\100\011\071\012\110" +
    "\036\105\053\065\063\075\064\104\067\103\070\101\071" +
    "\070\001\002\000\032\002\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\035\uffdf\037\uffdf\041\uffdf\042" +
    "\uffdf\046\uffdf\001\002\000\034\004\106\005\077\006\060" +
    "\007\100\011\071\012\110\036\105\053\065\063\075\064" +
    "\104\067\103\070\101\071\070\001\002\000\034\004\106" +
    "\005\077\006\060\007\100\011\071\012\110\036\105\053" +
    "\065\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\044\002\uffdb\023\uffdb\024\uffdb\026\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\035\uffdb\037\uffdb\041\uffdb\042\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\166\001\002\000" +
    "\034\004\106\005\077\006\060\007\100\011\071\012\110" +
    "\036\105\053\065\063\075\064\104\067\103\070\101\071" +
    "\070\001\002\000\044\002\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\035\uffd9\037\uffd9\041\uffd9\042" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\001\002\000\006\045\171\051\164\001\002\000\034\004" +
    "\106\005\077\006\060\007\100\011\071\012\110\036\105" +
    "\053\065\063\075\064\104\067\103\070\101\071\070\001" +
    "\002\000\036\002\uffdd\023\uffdd\024\uffdd\026\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\035\uffdd\037\uffdd\041\uffdd\042\uffdd\046" +
    "\uffdd\047\uffdd\051\164\001\002\000\032\004\106\005\077" +
    "\006\060\007\100\011\071\012\110\036\105\063\075\064" +
    "\104\067\103\070\101\071\070\001\002\000\032\004\106" +
    "\005\077\006\060\007\100\011\071\012\110\036\105\063" +
    "\075\064\104\067\103\070\101\071\070\001\002\000\032" +
    "\004\106\005\077\006\060\007\100\011\071\012\110\036" +
    "\105\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\032\004\106\005\077\006\060\007\100\011\071\012" +
    "\110\036\105\063\075\064\104\067\103\070\101\071\070" +
    "\001\002\000\032\004\106\005\077\006\060\007\100\011" +
    "\071\012\110\036\105\063\075\064\104\067\103\070\101" +
    "\071\070\001\002\000\032\004\106\005\077\006\060\007" +
    "\100\011\071\012\110\036\105\063\075\064\104\067\103" +
    "\070\101\071\070\001\002\000\032\004\106\005\077\006" +
    "\060\007\100\011\071\012\110\036\105\063\075\064\104" +
    "\067\103\070\101\071\070\001\002\000\032\004\106\005" +
    "\077\006\060\007\100\011\071\012\110\036\105\063\075" +
    "\064\104\067\103\070\101\071\070\001\002\000\050\002" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\037\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\062\200\063\175\001\002" +
    "\000\050\002\uffd0\023\uffd0\024\uffd0\026\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\037\uffd0\041\uffd0\042\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\062\200\063" +
    "\175\001\002\000\072\002\uffce\023\uffce\024\uffce\026\uffce" +
    "\031\uffce\032\uffce\033\uffce\035\uffce\037\uffce\041\uffce\042" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\210\065\206\066\207\001\002\000\032" +
    "\004\106\005\077\006\060\007\100\011\071\012\110\036" +
    "\105\063\075\064\104\067\103\070\101\071\070\001\002" +
    "\000\032\004\106\005\077\006\060\007\100\011\071\012" +
    "\110\036\105\063\075\064\104\067\103\070\101\071\070" +
    "\001\002\000\032\004\106\005\077\006\060\007\100\011" +
    "\071\012\110\036\105\063\075\064\104\067\103\070\101" +
    "\071\070\001\002\000\072\002\uffcb\023\uffcb\024\uffcb\026" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\037\uffcb\041\uffcb" +
    "\042\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000" +
    "\072\002\uffc9\023\uffc9\024\uffc9\026\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\001\002\000\072\002\uffca\023\uffca" +
    "\024\uffca\026\uffca\031\uffca\032\uffca\033\uffca\035\uffca\037" +
    "\uffca\041\uffca\042\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\001\002\000\050\002\uffd1\023\uffd1\024\uffd1\026\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1\041\uffd1\042\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\062" +
    "\200\063\175\001\002\000\050\002\uffd2\023\uffd2\024\uffd2" +
    "\026\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\062\200\063\175\001\002\000\072\002\uffcd\023" +
    "\uffcd\024\uffcd\026\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd" +
    "\037\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\210\065\206\066" +
    "\207\001\002\000\050\002\uffd5\023\uffd5\024\uffd5\026\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\035\uffd5\037\uffd5\041\uffd5\042" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\062\200\063\175\001\002\000\050\002\uffd3\023\uffd3\024" +
    "\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\037\uffd3" +
    "\041\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\062\200\063\175\001\002\000\004\012\015" +
    "\001\002\000\006\037\ufff6\042\ufff6\001\002\000\004\047" +
    "\224\001\002\000\004\036\225\001\002\000\006\012\015" +
    "\037\ufff9\001\002\000\004\037\227\001\002\000\004\046" +
    "\230\001\002\000\012\002\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\001\002\000\004\047\232\001\002\000\012\004\234\005" +
    "\235\006\236\007\233\001\002\000\004\046\242\001\002" +
    "\000\004\046\241\001\002\000\004\046\240\001\002\000" +
    "\004\046\237\001\002\000\012\002\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\001\002\000\012\002\uffff\031\uffff\032\uffff\033" +
    "\uffff\001\002\000\012\002\001\031\001\032\001\033\001" +
    "\001\002\000\012\002\ufffd\031\ufffd\032\ufffd\033\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\013\004\012\005" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\046\001\001\000\036\005\073\007" +
    "\052\011\071\013\056\014\055\015\054\016\053\017\051" +
    "\020\050\021\047\022\106\023\063\024\062\025\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\155\013\056\014\055\015\054\016\053\017\051\020" +
    "\050\021\047\022\106\023\063\024\062\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\154\017\051\020\050\021\047\022\106\023\063" +
    "\024\062\025\061\001\001\000\002\001\001\000\032\011" +
    "\153\013\056\014\055\015\054\016\053\017\051\020\050" +
    "\021\047\022\106\023\063\024\062\025\061\001\001\000" +
    "\004\025\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\145\013\056\014\055\015\054\016\053\017" +
    "\051\020\050\021\047\022\106\023\063\024\062\025\061" +
    "\001\001\000\002\001\001\000\012\022\144\023\063\024" +
    "\062\025\061\001\001\000\040\005\073\007\137\010\140" +
    "\011\071\013\056\014\055\015\054\016\053\017\051\020" +
    "\050\021\047\022\106\023\063\024\062\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\125\001" +
    "\001\000\032\011\123\013\056\014\055\015\054\016\053" +
    "\017\051\020\050\021\047\022\106\023\063\024\062\025" +
    "\061\001\001\000\010\023\122\024\062\025\061\001\001" +
    "\000\010\023\121\024\062\025\061\001\001\000\032\011" +
    "\110\013\056\014\055\015\054\016\053\017\051\020\050" +
    "\021\047\022\106\023\063\024\062\025\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\114\013\056\014" +
    "\055\015\054\016\053\017\051\020\050\021\047\022\106" +
    "\023\063\024\062\025\061\026\113\027\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\117\013\056\014\055\015\054\016\053\017\051\020" +
    "\050\021\047\022\106\023\063\024\062\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\011" +
    "\134\013\056\014\055\015\054\016\053\017\051\020\050" +
    "\021\047\022\106\023\063\024\062\025\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\073\007\143\011\071" +
    "\013\056\014\055\015\054\016\053\017\051\020\050\021" +
    "\047\022\106\023\063\024\062\025\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\073\007\147\011\071\013\056\014\055" +
    "\015\054\016\053\017\051\020\050\021\047\022\106\023" +
    "\063\024\062\025\061\001\001\000\002\001\001\000\036" +
    "\005\073\007\151\011\071\013\056\014\055\015\054\016" +
    "\053\017\051\020\050\021\047\022\106\023\063\024\062" +
    "\025\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\073\007\157\011\071\013\056\014\055\015\054\016" +
    "\053\017\051\020\050\021\047\022\106\023\063\024\062" +
    "\025\061\001\001\000\002\001\001\000\030\013\161\014" +
    "\055\015\054\016\053\017\051\020\050\021\047\022\106" +
    "\023\063\024\062\025\061\001\001\000\002\001\001\000" +
    "\026\014\167\015\054\016\053\017\051\020\050\021\047" +
    "\022\106\023\063\024\062\025\061\001\001\000\024\015" +
    "\164\016\053\017\051\020\050\021\047\022\106\023\063" +
    "\024\062\025\061\001\001\000\002\001\001\000\022\016" +
    "\166\017\051\020\050\021\047\022\106\023\063\024\062" +
    "\025\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\171\015\054\016\053\017\051\020\050\021\047" +
    "\022\106\023\063\024\062\025\061\001\001\000\002\001" +
    "\001\000\016\020\217\021\047\022\106\023\063\024\062" +
    "\025\061\001\001\000\016\020\216\021\047\022\106\023" +
    "\063\024\062\025\061\001\001\000\014\021\215\022\106" +
    "\023\063\024\062\025\061\001\001\000\016\020\214\021" +
    "\047\022\106\023\063\024\062\025\061\001\001\000\016" +
    "\020\213\021\047\022\106\023\063\024\062\025\061\001" +
    "\001\000\014\021\204\022\106\023\063\024\062\025\061" +
    "\001\001\000\016\020\203\021\047\022\106\023\063\024" +
    "\062\025\061\001\001\000\016\020\202\021\047\022\106" +
    "\023\063\024\062\025\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\212\023\063" +
    "\024\062\025\061\001\001\000\012\022\211\023\063\024" +
    "\062\025\061\001\001\000\012\022\210\023\063\024\062" +
    "\025\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\225\004\012\005\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void syntax_error( Symbol next )
   {
      System. out. println( "Syntax Error at position " +
                               ( next. left + 1 ) + "/" + next. right +
                               " for lookahead " +
                               sym. terminalNames [ next. sym ] +
                               " with attribute " + next. value );
   }

   public cflat.Program parsetree;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN BOOLCONST SEMICOLON 
            {
              cflat.Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Bool b = (ast.Bool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parsetree. addconstant( i. id, b ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		cflat.Program start_val = (cflat.Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN CHARCONST SEMICOLON 
            {
              cflat.Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Char c = (ast.Char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parsetree. addconstant( i. id, c ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN INTEGERCONST SEMICOLON 
            {
              cflat.Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Integer j = (ast.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parsetree. addconstant( i. id, j ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Prog ::= Prog CONSTANT IDENTIFIER ASSIGN DOUBLECONST SEMICOLON 
            {
              cflat.Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Double d = (ast.Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parsetree. addconstant( i. id, d ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Prog ::= Prog STRUCTDEF IDENTIFIER ASSIGN LPAR Decllist RPAR SEMICOLON 
            {
              cflat.Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<type.Field> lst = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parsetree. addstruct( i. id, lst ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Prog ::= Prog FUNCTION IDENTIFIER LPAR Decllist RPAR COLON Type Stat 
            {
              cflat.Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ast.Identifier i = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.util.ArrayList<type.Field> params = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rettypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rettyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type rettype = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree body = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             System.out.println("Parsing Function: ");
             System.out.println("Function name: " + i.id);
             System.out.println("Return type: " + rettype.toString());
             parsetree. addfunction( i. id, params, rettype, body ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Prog ::= 
            {
              cflat.Program RESULT =null;
		 parsetree = new cflat.Program( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decllist ::= 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		 RESULT = new java.util.ArrayList< type.Field > ( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decllist ::= Decllist2 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.util.ArrayList<type.Field> lst = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decllist2 ::= Decl 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Field d = (type.Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new java.util.ArrayList< type.Field > ( );
                        RESULT. add( d ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decllist2 ::= Decllist2 COMMA Decl 
            {
              java.util.ArrayList<type.Field> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<type.Field> lst = (java.util.ArrayList<type.Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Field d = (type.Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; RESULT. add( d ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decllist2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= IDENTIFIER COLON Type 
            {
              type.Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Type tp = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             System.out.println("Pair: " + id. id + " - " + tp.toString());
             RESULT = new type.Field( id. id, tp );  
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= VOID 
            {
              type.Type RESULT =null;
		 RESULT = new type.Void( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              type.Type RESULT =null;
		 RESULT = new type.Bool( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= CHAR 
            {
              type.Type RESULT =null;
		 RESULT = new type.Char( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= INTEGER 
            {
              type.Type RESULT =null;
		 RESULT = new type.Integer( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= DOUBLE 
            {
              type.Type RESULT =null;
		 RESULT = new type.Double( ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= POINTER LPAR Type RPAR 
            {
              type.Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type t = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new type.Pointer(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= ARRAY LPAR INTEGERCONST COMMA Type RPAR 
            {
              type.Type RESULT =null;
		int cnstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cnstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Integer cnst = (ast.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type t = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new type.Array(cnst.i, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= ARRAY LPAR IDENTIFIER COMMA Type RPAR 
            {
              type.Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		type.Type tp = (type.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ast.Tree val = parsetree. constdefs. get( id.id );
                 if( val == null )
                    throw new SemanticError( "identifier " + id.id +
                        " used as array size but has no constant definition" );
                 if( val instanceof ast.Integer )
                 {
                    RESULT = new type.Array( ((ast.Integer) val).i, tp );
                 }
                 else
                    throw new SemanticError( "identifier " + id.id +
                       " used in array size but not defined as integer" );
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= IDENTIFIER 
            {
              type.Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              id.type = new type.Struct(id.id);
              RESULT = id.type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat ::= IF Expr THEN Stat 
            {
              ast.Tree RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree cond = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree body = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[if]", cond, body ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat ::= IF Expr THEN Stat ELSE Stat 
            {
              ast.Tree RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Tree cond = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree s1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree s2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[if]", cond, s1, s2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stat ::= WHILE Expr DO Stat 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree stat = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply( "[while]", e, stat ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stat ::= BEGIN Statlist END 
            {
              ast.Tree RESULT =null;
		int statlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.util.ArrayList<ast.Tree> statlist = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ast.Tree[] arr = statlist.toArray(new ast.Tree[0]);
                 RESULT = new ast.Apply("[compound]", arr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stat ::= PRINT Expr 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("[print]", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stat ::= PRINT STRING 
            {
              ast.Tree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.String str = (ast.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("[print]", str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stat ::= RETURN Expr 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("[return]", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Expr 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("[expr]", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= Decl 
            {
              ast.Tree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		type.Field d = (type.Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                ast.Identifier id = new ast.Identifier(d.f); 
                id.lr = 'L'; 
                id.type = d.tp; 
                ast.Tree res = new ast.Apply("[decl]", id); 
                res. type = d.tp;
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= RETURN 
            {
              ast.Tree RESULT =null;
		 RESULT = new ast.Apply("[return]"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statlist ::= Stat 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree s = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 java.util.ArrayList <ast.Tree> lst = 
                                new java.util.ArrayList<ast.Tree>(); 
                         lst.add(s); 
                         RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statlist ::= Statlist SEMICOLON Stat 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<ast.Tree> slst = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree s = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 slst.add(s); RESULT = slst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= Expr2 ASSIGN Expr2 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("=", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= Expr2 
            {
              ast.Tree RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr2 ::= Expr3 QUESTION Expr3 COLON Expr3 
            {
              ast.Tree RESULT =null;
		int Condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int Condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Tree Cond = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Trueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Trueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree True = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Falseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Falseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree False = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("??", Cond, True, False); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr2 ::= Expr3 
            {
              ast.Tree RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e3 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e3; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= Expr3 OR Expr4 
            {
              ast.Tree RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree cond1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree cond2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("??", cond1, new ast.Bool(true), cond2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr3 ::= Expr4 
            {
              ast.Tree RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e4 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e4; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr4 ::= Expr4 AND Expr5 
            {
              ast.Tree RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree cond1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree cond2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("??", cond1, cond2, new ast.Bool(false)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr4",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr4 ::= Expr5 
            {
              ast.Tree RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e5 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e5; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr4",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr5 ::= NOT Expr5 
            {
              ast.Tree RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e5 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("??", e5, new ast.Bool(false), new ast.Bool(true)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr5",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr5 ::= Expr6 
            {
              ast.Tree RESULT =null;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e6 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e6; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr5",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr6 ::= Expr7 EQ Expr7 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("eq", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr6 ::= Expr7 NE Expr7 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("ne", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr6 ::= Expr7 LT Expr7 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("lt", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr6 ::= Expr7 GT Expr7 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("gt", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr6 ::= Expr7 LE Expr7 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("le", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr6 ::= Expr7 GE Expr7 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("ge", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr6 ::= Expr7 
            {
              ast.Tree RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e7 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e7; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr7 ::= Expr7 ADD Expr8 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("add", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr7 ::= Expr7 SUB Expr8 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("sub", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr7 ::= Expr8 
            {
              ast.Tree RESULT =null;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e8 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e8; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr8 ::= Expr8 MUL Expr9 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("mul", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr8",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr8 ::= Expr8 TRUEDIV Expr9 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("div", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr8",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr8 ::= Expr8 MODULO Expr9 
            {
              ast.Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e1 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e2 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("mod", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr8",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr8 ::= Expr9 
            {
              ast.Tree RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e9 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e9; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr8",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr9 ::= SUB Expr9 
            {
              ast.Tree RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e9 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("neg", e9); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr9",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr9 ::= Expr10 
            {
              ast.Tree RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e10 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e10; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr9",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr10 ::= MUL Expr10 
            {
              ast.Tree RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e10 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("pntr", e10); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr10",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr10 ::= AMPERSAND Expr10 
            {
              ast.Tree RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e10 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("amp", e10); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr10",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr10 ::= Expr11 
            {
              ast.Tree RESULT =null;
		int e11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e11 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e11; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr10",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr11 ::= PLUSPLUS Expr12 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("[ppx]", e12); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr11",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr11 ::= MINUSMINUS Expr12 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Apply("[mmx]", e12); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr11",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr11 ::= Expr12 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e12; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr11",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr12 ::= Expr12 PLUSPLUS 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ast.Apply("[xpp]", e12); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr12 ::= Expr12 MINUSMINUS 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ast.Apply("[xmm]", e12); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr12 ::= Expr12 DOT IDENTIFIER 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Select(id.toString(), e12); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr12 ::= Expr12 ARROW IDENTIFIER 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ast.Select(id.toString(), new ast.Apply("select", e12)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr12 ::= Expr12 LSQPAR Expr RSQPAR 
            {
              ast.Tree RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Tree e12 = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ast.Apply("*", new ast.Apply("+", e12, e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr12 ::= IDENTIFIER 
            {
              ast.Tree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr12 ::= IDENTIFIER LPAR Exprlist RPAR 
            {
              ast.Tree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Identifier id = (ast.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.util.ArrayList<ast.Tree> lst = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                ast.Tree[] arr = lst.toArray(new ast.Tree[0]);
                                                RESULT = new ast.Apply(id.toString(), arr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr12 ::= BOOLCONST 
            {
              ast.Tree RESULT =null;
		int boolConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Bool boolConst = (ast.Bool)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 boolConst.type = new type.Bool(); RESULT = boolConst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr12 ::= CHARCONST 
            {
              ast.Tree RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Char charConst = (ast.Char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = charConst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr12 ::= INTEGERCONST 
            {
              ast.Tree RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Integer intConst = (ast.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intConst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr12 ::= DOUBLECONST 
            {
              ast.Tree RESULT =null;
		int doubleConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doubleConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Double doubleConst = (ast.Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = doubleConst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr12 ::= POINTERCONST 
            {
              ast.Tree RESULT =null;
		int pntrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pntrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Pointer pntr = (ast.Pointer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pntr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr12 ::= LPAR Expr RPAR 
            {
              ast.Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exprlist ::= Exprlist2 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.util.ArrayList<ast.Tree> lst = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprlist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exprlist ::= 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		 RESULT = new java.util.ArrayList <ast.Tree> (); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprlist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exprlist2 ::= Expr 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        java.util.ArrayList <ast.Tree> lst = new java.util.ArrayList(); 
                        lst.add(e); 
                        RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprlist2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exprlist2 ::= Exprlist2 COMMA Expr 
            {
              java.util.ArrayList<ast.Tree> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.ArrayList<ast.Tree> lst = (java.util.ArrayList<ast.Tree>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Tree e = (ast.Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(e); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprlist2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
