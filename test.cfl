
constant i = 44;
constant pi = 3.141592653589793;

constant many = 100;

structdef complex = ( re: double, im : double );

structdef list = ( first : double, next : pointer( list ));

function listsum( p : pointer( list ) ) : double 
begin
   sum : double;
   sum = 0.0; 
   while p != null do
   begin
      sum = sum + p -> first ;
      p = p -> next 
   end;
   return sum
end

function complex( re : double, im : double ) : complex
begin
   res : complex;
   res. re = re;
   res. im = im;
   return res
end

function four( n1 : integer, n2 : integer, 
               n3 : integer, n4 : integer ) : integer
begin
   return n1 + n2 + n3 + n4
end

function printcomplex( c : complex ) : void
begin
   print "complex: "; print c.re; print ", "; print c.im; newline; 
   return
end

function complexsum( c1 : complex, c2 : complex ) : complex
   return complex( c1. re + c2. re, c1. im + c2. im ) 


function fact( n : integer ) : double
begin
   res : double;
   res = 1; 
   while n != 0 do 
   begin 
      res = res * n;
      -- n 
   end;
   return res 
end

function factrec( n : integer ) : double
begin
   if n == 0 then
      return 1
   else
      return n * factrec( n - 1 )
end

/*
function length( p : pointer( list ) ) : integer
begin
   len : integer; 
   len = 1;

   while p != null do
   begin
      ++ len;
      p = p -> next 
   end; 
   return len
end

function strcpy( p : pointer( char ), q : pointer( char )) : void 
begin
   while *p != '\0' do
      *q ++ = *p ++  
end

structdef wronglist = ( first : double, rest : pointer( wronglist2 ));
structdef wronglist2 = ( first : array( 0, double ), second : array( 4, wronglist )); 
*/

constant dim = 10;

structdef matrix = ( val : array( dim, array( dim, double )));

function matproduct( m1 : matrix, m2 : matrix ) : matrix
begin
   result : matrix ;

   i : integer;
   i = 0;
   while i < dim do
   begin
      j : integer;
      j = 0;
      while j < dim do
      begin
         k : integer;
         k = 0;
         while k < dim do
         begin
            result.val[i][j] = result.val[i][j] + 
                               m1.val[i][k] + m2.val[k][j] ;
               /* not sure if this is mathematically correct. 
                  Does not matter. */ 
            ++ k 
         end;  
         ++ j 
      end;
      ++ i 
   end 
end

function scope( ) : void
begin
   i: integer;
   j: integer;
   begin
      i : double; 
      print i  /*  the double. */
   end;
   begin
      i : complex; 
      i.re = 0.0; i.im = j  
   end;
   print i 
end


function midterm3( ) : void
begin
   string : array( 20, char );
   val : array( 10, integer );
   i : integer;

   i = 0;                          /* B */ 
   while i != 10 do                /* C */ 
   begin
      val[i] = string[i];          /* D */
      i ++                         /* E */ 
   end; 

   i : integer; 
   a : array( 10, double );
   a[i] = a[i - 1] + a[ i - 2 ]
end


structdef tree = ( key : double, val : double,
                   left : pointer( tree ), right : pointer( tree )) ;
constant NaN = 10000000.0;

function midterm4( ) : double 
begin
   d : integer;
   p : pointer( tree );
   while p != null do              /* A */
   begin
      if d == p -> key then        /* B */ 
         return p -> val;          /* C */
      if d < p -> key then
         p = p -> left             /* D */
      else
         p = p -> right 
   end;
   return NaN                      /* E */ 
end


function sinegrad( x : double ) : double
   begin
      x = x * pi / 180;
      n : integer; n = 1;
      sum : double; sum = 0;
      term : double; term = x; 
      while sum + term != sum do
      begin
         sum = sum + term;
         term = -term * x * x / ( n + 1 ) / ( n + 2 );
         n = n + 2
      end;
      return sum
   end


structdef complexpair = ( first : complex, second : complex );

function justreturn( pair : complexpair ) : complexpair
   return pair


function negate( c : complex ) : complex
begin
   c. re = - c.re;
   c. im = - c.im;
   return c
end

function main( ) : void
begin
   pair : complexpair; 
   pair. first. re = 1;
   pair. first. im = 100;
   pair. second. re = 10;
   pair. second. im = 5;
   printcomplex( complexsum( negate( justreturn( pair ).first ), 
                             justreturn( pair ).second ));

   d : double;
   d = 30; 
   print "sine of "; print d; print " degrees equals ";
   print sinegrad( d ); newline ; 
   return
end
 
## this is the end

