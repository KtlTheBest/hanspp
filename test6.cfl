constant dim = 3;
structdef list = ( first : double, next : pointer ( list ) );
structdef matrix = ( val : array( dim, array( dim, double )));

function printmatrix( m : pointer( matrix )) : void
begin
   print "matrix "; newline;
   i : integer;
   i = 0;
   while i < dim do
   begin
      j : integer ;
      j = 0 ;
      while j < dim do
      begin
         print "   ";
         print m -> val[i][j];
         j ++
      end;
      newline;
      i ++
   end;
   newline;
   return
end

function matrixproduct( m1 : pointer( matrix ),
                        m2 : pointer( matrix )) : matrix
begin
   result : matrix;

   i : integer;
   i = 0;
   while i < dim do
   begin
      j : integer;
      j = 0;
      while j < dim do
      begin
         result.val[i][j] = 0.0;
         k : integer;
         k = 0;
         while k < dim do
         begin
            result.val[i][j] = result.val[i][j] +
                               m1 -> val[i][k] * m2 -> val[k][j] ;
            ++ k
         end;
         ++ j
      end;
      ++ i
   end;
   return result
end

function listsum( cur : pointer( list ) ) : double
begin
  sum : double;
  pntr : pointer( sum );
  if cur -> next == null then
    sum = 0.0
  else
  begin
    sum = listsum( cur -> next )
  end;
  sum = 
  sum + 
  cur -> first;
#
  return sum
end

function listlength( cur : pointer( list ) ) : integer
begin

  if cur == null then
    return 0;

  return 1 + listlength(cur -> next)
end

function test1 ( ) : void
begin
   l1 : list;
   l2 : list;
   l3 : list;
   l4 : list;
   l1. first = 1;  l1. next = &l2;
   l2. first = 3;  l2. next = &l3;
   l3. first = 5;  l3. next = &l4;
   l4. first = 6;  l4. next = null;

   print "the sum is ";
   print listsum( &l1 ); newline;
   print "the length is ";
   print listlength( &l1 ); newline;
  return
end

function test2 ( ) : void
begin
   m1 : matrix;
   m2 : matrix;

   m1.val[0][0] = 1; m1.val[0][1] = -1; m1.val[0][2] = 9;
   m1.val[1][0] = 2; m1.val[1][1] = 6; m1.val[1][2] = -5;
   m1.val[2][0] = 4; m1.val[2][1] = 8; m1.val[2][2] = 12;
   printmatrix( &m1 );

   m2.val[0][0] = 7; m2.val[0][1] = 2; m2.val[0][2] = 3;
   m2.val[1][0] = 3; m2.val[1][1] = 1; m2.val[1][2] = 6;
   m2.val[2][0] = 5; m2.val[2][1] = 8; m2.val[2][2] = 13;
   printmatrix( &m2 );

   m3 : matrix;
   m3 = matrixproduct( &m1, &m2 );
   print "this is the product"; newline;
   printmatrix( &m3 );
   return
end

function main( ) : void
begin
  test1();
  test2();
  return
end
